import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.dsl.KotlinVersion
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://maven.aliyun.com/nexus/content/groups/public/" }
        gradlePluginPortal()
    }
}

plugins {
    id "org.jetbrains.intellij.platform" version "2.3.0"
    id "org.jetbrains.kotlin.jvm" version "2.1.0"
    id "com.adarshr.test-logger" version "4.0.0"
    id "de.undercouch.download" version "5.5.0"
}

testlogger {
    theme 'mocha'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://maven.aliyun.com/nexus/content/groups/public/" }
    maven { url "https://www.jetbrains.com/intellij-repository/releases" }
    intellijPlatform {
        defaultRepositories()
    }
}

dependencies {
    intellijPlatform {
        if (localIdea.toBoolean()) {
            local(file(ideaPath))
        } else {
            platform('IU') {
                version = ideaVersion
            }
        }
        bundledPlugins(['com.intellij.java'])
    }
}

// 新的配置方式
intellijPlatform {
    pluginConfiguration {
        name = 'Rainbow Fart'
    }
}

//1.0版本开始IntelliJ插件publishPlugin任务的配置方式发生了改变，所以对这里进行了更改
tasks {
    publishPlugin {
        token = System.getenv("token")
        //在 Kotlin DSL (build.gradle.kts) 中，使用 listOf(publishChannels)
        //但在 Groovy DSL (build.gradle) 中，应该使用 [publishChannels]
        channels.set([publishChannels])
    }
}

idea {
    project {
        jdkName = javaVersion
        languageLevel = javaVersion
    }
}

dependencies {
    implementation('io.timeandspace:cron-scheduler:0.1')
    implementation('javazoom:jlayer:1.0.1')
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.16.+") {
        exclude group: 'org.jetbrains.kotlin'
    }
    // Kotlin 标准库会由 Kotlin 插件自动添加，不需要明确指定
    // 如果需要额外的库，可以添加，但不需要指定版本
    implementation("org.jetbrains.kotlin:kotlin-reflect")
}

// 使用新的 Kotlin 编译配置方式
tasks.withType(KotlinCompile).configureEach {
    compilerOptions {
        // 使用 JvmTarget 的静态方法 fromTarget
        jvmTarget.set(JvmTarget.fromTarget(javaVersion))

        // 从 gradle.properties 中读取 Kotlin 版本信息
        // 将版本字符串转换为对应的 KotlinVersion 枚举值
        def apiVersionEnum = "KOTLIN_" + kotlinTargetVersion.replace(".", "_")
        def languageVersionEnum = "KOTLIN_" + kotlinLanguageVersion.replace(".", "_")

        // apiVersion 使用 kotlinTargetVersion
        apiVersion.set(KotlinVersion.valueOf(apiVersionEnum))
        // languageVersion 使用 kotlinLanguageVersion
        languageVersion.set(KotlinVersion.valueOf(languageVersionEnum))
    }
}

// 简化的 Java 配置,替换sourceCompatibility和targetCompatibility
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(Integer.parseInt(javaVersion))
    }
}

test {
    useJUnitPlatform()
}
